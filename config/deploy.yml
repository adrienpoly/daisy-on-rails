# Name of your application. Used to uniquely configure containers.
service: daisy-on-rails

# Name of the container image.
image: adrienpoly/daisy-on-rails

# Deploy to these servers.
servers:
  web:
    hosts:
      - 5.75.232.156
    labels:
      labels:
      traefik.http.routers.daisy_on_rails.rule: Host(`daisy-on-rails.adrienpoly.com`)
      traefik.http.routers.daisy_on_rails_secure.entrypoints: websecure
      traefik.http.routers.daisy_on_rails_secure.rule: Host(`daisy-on-rails.adrienpoly.com`)
      traefik.http.routers.daisy_on_rails_secure.tls: true
      traefik.http.routers.daisy_on_rails_secure.tls.certresolver: letsencrypt
    options:
      network: private
# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: adrienpoly

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# persist the sqlite database and rails storage directory accross deploys
volumes:
  - "storage:/rails/storage"
# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    RUBY_YJIT_ENABLE: 1
    RAILS_SERVE_STATIC_FILES: true
  secret:
    - RAILS_MASTER_KEY
# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
# primary_role: web
# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json
# traefik:
#   options:
#     publish:
#       - "443:443"
#     # volume:
#     # - "/letsencrypt/acme.json:/letsencrypt/acme.json"
#   args:
#     entryPoints.web.address: ":80"
#     entryPoints.websecure.address: ":443"
#     entryPoints.web.http.redirections.entryPoint.to: websecure
#     entryPoints.web.http.redirections.entryPoint.scheme: https
#     entryPoints.web.http.redirections.entrypoint.permanent: true
# certificatesResolvers.letsencrypt.acme.email: "you@youremail"
# certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
# certificatesResolvers.letsencrypt.acme.httpchallenge: true
# certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets
# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false

builder:
  cache:
    type: registry
    options: mode=max,image-manifest=true,oci-mediatypes=true
